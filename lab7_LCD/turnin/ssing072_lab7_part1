/*	Author: ssing072
 *  Partner(s) Name: Neha Gupta
 *	Lab Section:
 *	Assignment: Lab #  Exercise #
 *	Exercise Description: [optional - include for your own benefit]
 *
 *	I acknowledge all content contained herein, excluding template or example
 *	code, is my own original work.
 */



#include <avr/io.h>
#include "io.h"
#include <avr/interrupt.h>
#include "simAVRHeader.h"
#endif
#ifdef _SIMULATE_
#endif
#define A0 (~PINA & 0x01)
#define A1 (~PINA & 0x02)

volatile unsigned char TimerFlag = 0;
unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerOn(){
	TCCR1B = 0x0B;
	OCR1A = 125;
	TIMSK1 = 0x02;
	TCNT1 = 0;
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80;
}

void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
}

ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}

void TimerSet(unsigned long M){
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

enum states{START, INIT, INCREMENT, WAIT, DECREMENT, RESET, WAIT10, WAIT10AGAIN} state;
unsigned char count = 0;
unsigned long i = 0;

void tick_Num(){
	
	switch(state){ //transitions
		case START:
			LCD_Cursor(1);
			LCD_WriteData(count + '0');
			state = INIT;
			break;
		case INIT:
			if(A0){
				i = 0;
				state = INCREMENT;
			}
			else{
				state = INIT;
			}
			break;
		case INCREMENT:
			state = WAIT10;
			break;
		case WAIT10:
			if(A0){
				if(A1){
					state = RESET;
				}
				else if(i < 10){
					state = WAIT10;
				}
				else{
					state = INCREMENT;
				}
			}
			else if(!A0){
				state = WAIT;
			}
			break;
		case DECREMENT:
			state = WAIT10AGAIN;
			break;
		case WAIT10AGAIN:
			if(A1){
				if(A0){
					state = RESET;
				}
				else if(i < 10){
					state = WAIT10AGAIN;
				}
				else{
					state = DECREMENT;
				}
			}
			else if(!A1){
				state = WAIT;
			}
			break;
		case WAIT:
			if(A0 && A1){
				state = RESET;
			}
			else if(A0){
				state = INCREMENT;
			}
			else if(A1){
				state = DECREMENT;
			}
			else{
				state = WAIT;
			}
			break;
		case RESET:
			if(!A0){
				if(!A1){
					state = START;
				}
			}
			if(!A1){
				if(!A0){
					state = START;
				}
			}
			else{
				state = RESET;
			}
			break;
	}

	switch(state){ //actions
		case INIT:
			count = 0;
			i = 0;
			break;
		case INCREMENT:
			if(count < 9){
				count++;
			}
			i = 0;
			LCD_Cursor(1);
			LCD_WriteData(count + '0');
			break;
		case DECREMENT:
			if(count > 0){
				count--;
			}
			i = 0;
			LCD_Cursor(1);
			LCD_WriteData(count + '0');
			break;
		case WAIT10:
			i++;
			break;
		case WAIT10AGAIN:
			i++;
			break;
		case WAIT:
			i = 0;
			break;
		case START:
			count = 0;
			break;
		case RESET:
			i = 0;
			break;
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	DDRC = 0xFF; PORTC = 0x00;
	DDRD = 0xFF; PORTD = 0x00;
	TimerSet(100);
	TimerOn();
	LCD_init();
	state = START;
	LCD_Cursor(1);
	LCD_WriteData(count + '0');
    while (1) 
    {
			tick_Num();
			while(!TimerFlag){};
			TimerFlag = 0;
    }
}
